


ARM Macro Assembler    Page 1 


    1 00000000         ; Filename:     main.s 
    2 00000000         ; Author:       ece353 staff 
    3 00000000         ; Description:  
    4 00000000         
    5 00000000                 export           __main
    6 00000000         
    7 00000000         ;**********************************************
    8 00000000         ; SRAM
    9 00000000         ;**********************************************
   10 00000000                 AREA             SRAM, READWRITE
   11 00000000                 align
   12 00000000         
   13 00000000         ;**********************************************
   14 00000000         ; Constant Variables (FLASH) Segment
   15 00000000         ;**********************************************
   16 00000000                 AREA             FLASH, CODE, READONLY
   17 00000000                 align
   18 00000000         
   19 00000000         ;**********************************************
   20 00000000         ; Code (FLASH) Segment
   21 00000000         ; main assembly program
   22 00000000         ;**********************************************
   23 00000000         __main  PROC
   24 00000000         
   25 00000000         ; Initialization of R0 and R1
   26 00000000 F04F 000F       MOV              R0, #15
   27 00000004 F04F 0164       MOV              R1, #100
   28 00000008         
   29 00000008         ; Using only conditional instructions (no branches)
   30 00000008         ; Implement the if statemens below.
   31 00000008         
   32 00000008         
   33 00000008         
   34 00000008         ; (1) If R0 == 15, then R2 = 100 , else R2 = 1
   35 00000008 280F            CMP              R0, #15
   36 0000000A BF0C 2264       MOVEQ            R2, #100
   37 0000000E 2201            MOVNE            R2, #1
   38 00000010         
   39 00000010         ; (2) If R0 != 15, then R3 = 200 , else R3 = 2
   40 00000010 280F            CMP              R0, #15
   41 00000012 BF0C 23C8       MOVEQ            R3, #200
   42 00000016 2302            MOVNE            R3, #2
   43 00000018         
   44 00000018         ; (3) If R0 < 15, then  R4 = 300 , else R4 = 3
   45 00000018 280F            CMP              R0, #15
   46 0000001A BFB4 F44F 
              7496             MOVLT            R4, #300
   47 00000020 2403            MOVGE            R4, #3
   48 00000022         
   49 00000022         ; (4) If R0 <= 15, then R5 = 400 , else R5 = 4
   50 00000022 BFD3 F44F 
              75C8             MOVLE            R5, #400
   51 00000028 2504            MOVGT            R5, #4
   52 0000002A         
   53 0000002A         ; (5) If R0 > 15,  then R6 =500 , else R6 = 5
   54 0000002A F44F 76FA       MOVGT            R6, #500
   55 0000002E 2605            MOVLE            R6, #5
   56 00000030         
   57 00000030         ; (6) If R0 >= 15, then R7 = 600 , else R7 = 6



ARM Macro Assembler    Page 2 


   58 00000030 BFAC F44F 
              7716             MOVGE            R7, #600
   59 00000036 2706            MOVLT            R7, #6
   60 00000038         
   61 00000038         
   62 00000038         
   63 00000038         
   64 00000038 F04F 0002       MOV              R0, #0x2
   65 0000003C         
   66 0000003C         ; (7) Implement the following switch statement using onl
                       y conditional instructions
   67 0000003C         
   68 0000003C         ; Hint: Start by setting R1 to the default value and the
                       n checking all of the
   69 0000003C         ; other cases.
   70 0000003C F04F 31FF       MOV              R1, #0xFFFFFFFF
   71 00000040         ; switch(R0)
   72 00000040         ; {
   73 00000040         ;      case 0:
   74 00000040         ;      {
   75 00000040         ;           R1 = 0;
   76 00000040         ;           break;
   77 00000040         ;      }
   78 00000040 2900            CMP              R1, #0
   79 00000042 F04F 0100       MOV              R1, #0
   80 00000046         ;      case 1:
   81 00000046         ;      {
   82 00000046         ;           R1 = 10;
   83 00000046         ;           break;
   84 00000046         ;      }
   85 00000046 2901            CMP              R1, #1
   86 00000048 F04F 010A       MOV              R1, #10
   87 0000004C         ;      case 2:
   88 0000004C         ;      {
   89 0000004C         ;           R1 = 20;
   90 0000004C         ;           break;
   91 0000004C         ;      }
   92 0000004C 2902            CMP              R1, #2
   93 0000004E F04F 0114       MOV              R1, #20
   94 00000052         ;      case 3:
   95 00000052         ;      {
   96 00000052         ;           R1 = 30;
   97 00000052         ;           break;
   98 00000052         ;      }
   99 00000052 2903            CMP              R1, #3
  100 00000054 F04F 011E       MOV              R1, #30
  101 00000058         ;      default:
  102 00000058         ;      {
  103 00000058         ;           R1 = 0xFFFFFFFF;
  104 00000058         ;           break;
  105 00000058         ;      }
  106 00000058         ;  }
  107 00000058         
  108 00000058         
  109 00000058         
  110 00000058         ; Initialization of R0 and R1
  111 00000058 F04F 000F       MOV              R0, #15
  112 0000005C F04F 0164       MOV              R1, #100
  113 00000060         



ARM Macro Assembler    Page 3 


  114 00000060         ; (8) If R0 >= 15 OR R1 < 150, then R8 = 700 , else R8 =
                        7
  115 00000060 F04F 0807       MOV              R8, #7
  116 00000064 280F            CMP              R0, #15
  117 00000066 BFA8 F44F 
              782F             MOVGE            R8, #700
  118 0000006C 2996            CMP              R1, #150
  119 0000006E BFB8 F44F 
              782F             MOVLT            R8, #700
  120 00000074         
  121 00000074         
  122 00000074         ; (9) If R0 >= 15 AND R1 < 150, then R9 = 800, else R9 =
                        8
  123 00000074 F04F 0908       MOV              R9, #8
  124 00000078 280F            CMP              R0, #15
  125 0000007A BFB4 F44F 
              7948             MOVLT            R9, #800
  126 00000080 F44F 7948       MOVGE            R9, #800
  127 00000084         
  128 00000084 F240 00FF 
              F6CF 70F0        MOV32            R0, #0xFFF000FF
  129 0000008C         ; (10) If bit 2 OR bit 21 of register R0 is a 1, then R1
                        = 900 , else R1 = 9
  130 0000008C F04F 0109       MOV              R1, #9
  131 00000090 F010 0F04       TST              R0, #0x4
  132 00000094 BF18 F44F 
              7161             MOVNE            R1, #900
  133 0000009A F410 1F00       TST              R0, #0x200000
  134 0000009E BF18 F44F 
              7161             MOVNE            R1, #900
  135 000000A4         
  136 000000A4         
  137 000000A4         
  138 000000A4         ; DO NOT MODIFY ANTHING BELOW THIS LINE!!! 
  139 000000A4         
  140 000000A4         INFINITE_LOOP
  141 000000A4 E7FE            B                INFINITE_LOOP
  142 000000A6         
  143 000000A6                 ENDP
  144 000000A6 00 00           align
  145 000000A8         
  146 000000A8         
  147 000000A8                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\obj\ece353_main.d -o.\obj\ece353_main.o -I.\RTE\_Target_1 -IC
:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4
C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__EVAL SETA 1" --predefine="__M
ICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 524" --predefine="_RTE_ SET
A 1" --predefine="TM4C123GH6PM SETA 1" --list=.\lst\ece353_main.lst ece353_main
.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

SRAM 00000000

Symbol: SRAM
   Definitions
      At line 10 in file ece353_main.s
   Uses
      None
Comment: SRAM unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FLASH 00000000

Symbol: FLASH
   Definitions
      At line 16 in file ece353_main.s
   Uses
      None
Comment: FLASH unused
INFINITE_LOOP 000000A4

Symbol: INFINITE_LOOP
   Definitions
      At line 140 in file ece353_main.s
   Uses
      At line 141 in file ece353_main.s
Comment: INFINITE_LOOP used once
__main 00000000

Symbol: __main
   Definitions
      At line 23 in file ece353_main.s
   Uses
      At line 5 in file ece353_main.s
Comment: __main used once
3 symbols
340 symbols in table
