


ARM Macro Assembler    Page 1 


    1 00000000         ; hw1.s ECE353
    2 00000000         
    3 00000000         
    4 00000000                 export           hw1_search_memory
    5 00000000                 import           WS2812B_write
    6 00000000         
    7 00000000         ; String constants  
    8 00000000 00000004 
                       WORD    EQU              4
    9 00000000 00000002 
                       HALF    EQU              2
   10 00000000 00000001 
                       BYTE    EQU              1
   11 00000000         
   12 00000000         ; String constansts to check for commands
   13 00000000 54494E49 
                       INIT_STR
                               EQU              0x54494E49
   14 00000000 54494157 
                       WAIT_STR
                               EQU              0x54494157
   15 00000000 504F5453 
                       STOP_STR
                               EQU              0x504F5453
   16 00000000 0044454C 
                       LED_STR EQU              0x0044454C
   17 00000000         
   18 00000000         ;**********************************************
   19 00000000         ; SRAM
   20 00000000         ;**********************************************
   21 00000000                 AREA             SRAM, READWRITE
   22 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 LED_ARRAY
                               SPACE            BYTE*24     ; 3 byte color of e
                                                            ach of the 8 LEDS
   23 00000018                 align
   24 00000018         
   25 00000018         ;**********************************************
   26 00000018         ; Constant Variables (FLASH) Segment
   27 00000018         ;**********************************************
   28 00000018                 AREA             FLASH, CODE, READONLY
   29 00000000         
   30 00000000         ;**********************************************
   31 00000000         ; Updates the WS2812B LEDs with the current values in th
                       e LED_ARRAY. Use the
   32 00000000         ; supplied function WS2812B_write to update the colors. 
                       
   33 00000000         ; 
   34 00000000         ; Parameters
   35 00000000         ; NONE
   36 00000000         ;
   37 00000000         ; Return
   38 00000000         ; Nothing



ARM Macro Assembler    Page 2 


   39 00000000         ;********************************************** 
   40 00000000         hw1_update_leds
                               PROC
   41 00000000 B506            PUSH             {R1, R2, LR}
   42 00000002         
   43 00000002 498C            LDR              R1, =(LED_ARRAY)
   44 00000004 F04F 0208       MOV              R2, #8
   45 00000008 F7FF FFFE       BL               WS2812B_write
   46 0000000C         
   47 0000000C E8BD 4006       POP              {R1, R2, LR}
   48 00000010         
   49 00000010 4770            BX               LR
   50 00000012                 ENDP
   51 00000012         
   52 00000012         ;**********************************************
   53 00000012         ; Converts A ASCII HEX character to its 
   54 00000012         ; numerical value.  Valid characters are 0-9,a-f,A-F.
   55 00000012         ; 
   56 00000012         ; Parameters
   57 00000012         ;  R0 : ASCII Char
   58 00000012         ;
   59 00000012         ; Returns
   60 00000012         ; R0 :  numerical value.  
   61 00000012         ;   If invalid, return 0xFFFFFFFF
   62 00000012         ;**********************************************  
   63 00000012         hw1_ascii_to_hex
                               PROC
   64 00000012 B404            PUSH             {R2}
   65 00000014         
   66 00000014         ; Check for 0-9
   67 00000014 F1A0 0230       SUB              R2, R0, #0x30
   68 00000018 2A00            CMP              R2, #0
   69 0000001A BFB8 F04F 
              32FF             MOVLT            R2, #0xFFFFFFFF
   70 00000020 2A09            CMP              R2, #9
   71 00000022 BFC8 F04F 
              32FF             MOVGT            R2, #0xFFFFFFFF
   72 00000028 F1B2 3FFF       CMP              R2, #0xFFFFFFFF
   73 0000002C D11D            BNE              DONE
   74 0000002E         
   75 0000002E         ; Check for a-f
   76 0000002E F1A0 0261       SUB              R2, R0, #0x61
   77 00000032 2A00            CMP              R2, #0
   78 00000034 BFB8 F04F 
              32FF             MOVLT            R2, #0xFFFFFFFF
   79 0000003A 2A05            CMP              R2, #5
   80 0000003C BFC8 F04F 
              32FF             MOVGT            R2, #0xFFFFFFFF
   81 00000042 F1B2 3FFF       CMP              R2, #0xFFFFFFFF
   82 00000046 BF18 320A       ADDNE            R2, #10
   83 0000004A D10E            BNE              DONE
   84 0000004C         
   85 0000004C         ; check for A-F
   86 0000004C F1A0 0241       SUB              R2, R0, #0x41
   87 00000050 2A00            CMP              R2, #0
   88 00000052 BFB8 F04F 
              32FF             MOVLT            R2, #0xFFFFFFFF
   89 00000058 2A05            CMP              R2, #5
   90 0000005A BFC8 F04F 



ARM Macro Assembler    Page 3 


              32FF             MOVGT            R2, #0xFFFFFFFF
   91 00000060 F1B2 3FFF       CMP              R2, #0xFFFFFFFF
   92 00000064 BF18 320A       ADDNE            R2, #10
   93 00000068 D1FF            BNE              DONE
   94 0000006A         
   95 0000006A 4610    DONE    MOV              R0, R2
   96 0000006C BC04            POP              {R2}
   97 0000006E         
   98 0000006E 4770            BX               LR
   99 00000070                 ENDP
  100 00000070         
  101 00000070         ;**********************************************
  102 00000070         ; Converts A single ASCII Decimal character to its 
  103 00000070         ; numerical value.  Valid characters are 0-9.
  104 00000070         ; 
  105 00000070         ; Parameters
  106 00000070         ;  R0 : ASCII Char
  107 00000070         ;
  108 00000070         ; Returns
  109 00000070         ; R0 :  numerical value.  
  110 00000070         ;   If invalid, return 0xFFFFFFFF
  111 00000070         ;**********************************************
  112 00000070         hw1_ascii_to_dec
                               PROC
  113 00000070         
  114 00000070 B404            PUSH             {R2}
  115 00000072         
  116 00000072 F1A0 0030       SUB              R0, R0, #0x30
  117 00000076 2800            CMP              R0, #0
  118 00000078 BFB8 F04F 
              30FF             MOVLT            R0, #0xFFFFFFFF
  119 0000007E 2809            CMP              R0, #9
  120 00000080 BFC8 F04F 
              30FF             MOVGT            R0, #0xFFFFFFFF
  121 00000086         
  122 00000086 BC04            POP              {R2}
  123 00000088         
  124 00000088 4770            BX               LR
  125 0000008A                 ENDP
  126 0000008A         
  127 0000008A         ;**********************************************
  128 0000008A         ; Turns off all of the WSB28128 by writing 
  129 0000008A         ; 0x000000 to each LED
  130 0000008A         ;
  131 0000008A         ; Parameters
  132 0000008A         ; NONE
  133 0000008A         ;
  134 0000008A         ; Return
  135 0000008A         ; Nothing
  136 0000008A         ;**********************************************
  137 0000008A         hw1_init
                               PROC
  138 0000008A B503            PUSH             {R0, R1, LR}
  139 0000008C         
  140 0000008C 4869            LDR              R0, =(LED_ARRAY)
  141 0000008E F240 0100 
              F2C0 0100        MOV32            R1, #0
  142 00000096         ; initialyze 4 bytes of LED_ARRAY 6 TIMES
  143 00000096 F840 1B04       STR              R1, [R0], #WORD



ARM Macro Assembler    Page 4 


  144 0000009A F840 1B04       STR              R1, [R0], #WORD
  145 0000009E F840 1B04       STR              R1, [R0], #WORD
  146 000000A2 F840 1B04       STR              R1, [R0], #WORD
  147 000000A6 F840 1B04       STR              R1, [R0], #WORD
  148 000000AA F840 1B04       STR              R1, [R0], #WORD
  149 000000AE         
  150 000000AE F7FF FFFE       BL               hw1_update_leds
  151 000000B2 E8BD 4003       POP              {R0, R1, LR}
  152 000000B6         
  153 000000B6 4770            BX               LR
  154 000000B8                 ENDP
  155 000000B8         
  156 000000B8         
  157 000000B8         ;**********************************************
  158 000000B8         ; Updates the color of the specified LED. 
  159 000000B8         ; All other LEDs should maintain their current
  160 000000B8         ; color. Makes use of the hw1_update_leds to 
  161 000000B8         ; update the color of the LEDs.
  162 000000B8         ;
  163 000000B8         ; Parameters
  164 000000B8         ; R0 – LED number to be updated
  165 000000B8         ; R1 – An unsigned 32bit number. Bits 31-24 are unused. 
                       
  166 000000B8         ; Bits 23-0 represent the color value to write to the LE
                       D.
  167 000000B8         ;
  168 000000B8         ; Return
  169 000000B8         ; Nothing
  170 000000B8         ;********************************************** 
  171 000000B8         hw1_ledx
                               PROC
  172 000000B8         
  173 000000B8 B50E            PUSH             {R1-R3, LR}
  174 000000BA         ; R2 Stores stores the adress of LED_ARRAY
  175 000000BA 4A5E            LDR              R2, =(LED_ARRAY)
  176 000000BC F04F 0303       MOV              R3, #3
  177 000000C0         ; offset from LED_ARRAY
  178 000000C0 FB03 F300       MUL              R3, R3, R0
  179 000000C4 441A            ADD              R2, R2, R3
  180 000000C6         ; set bits 0-15
  181 000000C6 F822 1B02       STRH             R1, [R2], #HALF
  182 000000CA         ; set bits 16-23
  183 000000CA EA4F 4111       LSR              R1, R1, #HALF*8
  184 000000CE 7011            STRB             R1, [R2]
  185 000000D0         
  186 000000D0         ; update colors of led
  187 000000D0 F7FF FFFE       BL               hw1_update_leds
  188 000000D4         
  189 000000D4 E8BD 400E       POP              {R1-R3, LR}
  190 000000D8         
  191 000000D8 4770            BX               LR
  192 000000DA                 ENDP
  193 000000DA         
  194 000000DA         
  195 000000DA         ; check with unsigned 
  196 000000DA         ;**********************************************
  197 000000DA         ; Delays the examination of the next memory address 
  198 000000DA         ; by a variable amount of time.
  199 000000DA         ;



ARM Macro Assembler    Page 5 


  200 000000DA         ; Parameters
  201 000000DA         ; R0 – A 32-bit unsigned number representing the number 
                       of iterations 
  202 000000DA         ; of an empty for loop that must be executed.
  203 000000DA         ;
  204 000000DA         ; Return
  205 000000DA         ; Nothing
  206 000000DA         ;********************************************** 
  207 000000DA         hw1_wait
                               PROC
  208 000000DA B402            PUSH             {R1}
  209 000000DC 4601            MOV              R1, R0
  210 000000DE 2900    WAIT_LOOP
                               CMP              R1, #0
  211 000000E0 F1A1 0101       SUB              R1, R1, #1
  212 000000E4 DCFB            BGT              WAIT_LOOP
  213 000000E6 BC02            POP              {R1}
  214 000000E8 4770            BX               LR
  215 000000EA                 ENDP
  216 000000EA         
  217 000000EA         ;**********************************************
  218 000000EA         ; Check to see if an address holds the Command
  219 000000EA         ; 'INIT'
  220 000000EA         ; 
  221 000000EA         ; Parameters
  222 000000EA         ;  R0 :  Address to examine
  223 000000EA         ; 
  224 000000EA         ; Returns
  225 000000EA         ;   R1 :  0x00000000 if INIT was found
  226 000000EA         ;         0xFFFFFFFF if INIT was NOT FOUND 
  227 000000EA         ;**********************************************
  228 000000EA         check_for_init
                               PROC
  229 000000EA         
  230 000000EA B40C            PUSH             {R2, R3}
  231 000000EC         
  232 000000EC         ; Load the 4 character string starting at R0
  233 000000EC         ; into a register
  234 000000EC 6802            LDR              R2, [R0]
  235 000000EE         
  236 000000EE         ; Load 'INIT' to R3
  237 000000EE F644 6349 
              F2C5 4349        MOV32            R3, INIT_STR
  238 000000F6         
  239 000000F6         ; Check to see if the resulting value is 
  240 000000F6         ; equal to 'INIT'
  241 000000F6 429A            CMP              R2, R3
  242 000000F8         
  243 000000F8         ; Set the return value
  244 000000F8 BF0C 2100       MOVEQ            R1, #0x00000000
  245 000000FC F04F 31FF       MOVNE            R1, #0xFFFFFFFF
  246 00000100         
  247 00000100 BC0C            POP              {R2, R3}
  248 00000102         
  249 00000102         ; Return
  250 00000102 4770            BX               LR
  251 00000104         
  252 00000104                 ENDP
  253 00000104         



ARM Macro Assembler    Page 6 


  254 00000104         ;**********************************************
  255 00000104         ; Check to see if an address holds the Command
  256 00000104         ; 'STOP' in which the program should enter
  257 00000104         ; infinite loop
  258 00000104         ; 
  259 00000104         ; Parameters
  260 00000104         ;  R0 :  Address to examine
  261 00000104         ; 
  262 00000104         ; Returns
  263 00000104         ;   R1 :  0x00000000 if STOP was found
  264 00000104         ;         0xFFFFFFFF if STOP was NOT FOUND 
  265 00000104         ;**********************************************
  266 00000104         check_for_stop
                               PROC
  267 00000104         
  268 00000104 B40C            PUSH             {R2, R3}
  269 00000106         
  270 00000106         ; Load the 4 character string starting at R0
  271 00000106         ; into a register
  272 00000106 6802            LDR              R2, [R0]
  273 00000108         
  274 00000108         ; Load 'INIT' to R3
  275 00000108 F245 4353 
              F2C5 034F        MOV32            R3, STOP_STR
  276 00000110         
  277 00000110         ; Check to see if the resulting value is 
  278 00000110         ; equal to 'INIT'
  279 00000110 429A            CMP              R2, R3
  280 00000112         
  281 00000112         ; Set the return value
  282 00000112 BF0C 2100       MOVEQ            R1, #0x00000000
  283 00000116 F04F 31FF       MOVNE            R1, #0xFFFFFFFF
  284 0000011A         
  285 0000011A BC0C            POP              {R2, R3}
  286 0000011C         
  287 0000011C         ; Return
  288 0000011C 4770            BX               LR
  289 0000011E         
  290 0000011E                 ENDP
  291 0000011E         
  292 0000011E         ;**********************************************
  293 0000011E         ; Check to see if an address holds the Command
  294 0000011E         ; 'WAIT(4-digit-decimal)' in which the program sould exe
                       cute
  295 0000011E         ; 4-digit-decimal*10,000 iterations of empty loop
  296 0000011E         ; 
  297 0000011E         ; Parameters
  298 0000011E         ;  R0 :  Address to examine
  299 0000011E         ; 
  300 0000011E         ; Returns
  301 0000011E         ;   R1 :  4-digit-demimal in hex 
  302 0000011E         ;         0xFFFFFFFF if WAIT was NOT FOUND or invalid nu
                       mber
  303 0000011E         ;**********************************************
  304 0000011E         check_for_wait
                               PROC
  305 0000011E         
  306 0000011E B53D            PUSH             {R0, R2-R5, LR}
  307 00000120         



ARM Macro Assembler    Page 7 


  308 00000120         ; Load the 4 character string starting at R0
  309 00000120         ; into a register
  310 00000120 6802            LDR              R2, [R0]
  311 00000122         
  312 00000122         ; Load 'WAIT' to R3
  313 00000122 F244 1357 
              F2C5 4349        MOV32            R3, WAIT_STR
  314 0000012A         
  315 0000012A         ; Check to see if the resulting value is 
  316 0000012A         ; equal to 'WAIT'
  317 0000012A 429A            CMP              R2, R3
  318 0000012C         
  319 0000012C         ; Set the return value
  320 0000012C BF1C F04F 
              31FF             MOVNE            R1, #0xFFFFFFFF
  321 00000132 F000 F81A       BLNE             FINISH_WAIT
  322 00000136         
  323 00000136         ; Check to see if there is 4-digit decimal after 'WAIT'
  324 00000136         ; R2 Stores address of number
  325 00000136 F100 0204       ADD              R2, R0, #BYTE*4
  326 0000013A         ; R4 Stores counts of loop iteration
  327 0000013A F04F 0404       MOV              R4, #4
  328 0000013E         ; R1 Stores decimal value
  329 0000013E F04F 0100       MOV              R1, #0
  330 00000142         LOOP_WAIT
  331 00000142 2C00            CMP              R4, #0
  332 00000144 D011            BEQ              FINISH_WAIT
  333 00000146 F812 0B01       LDRB             R0, [R2], #1
  334 0000014A F7FF FFFE       BL               hw1_ascii_to_dec
  335 0000014E F1B0 3FFF       CMP              R0, #0xFFFFFFFF
  336 00000152         ; If it is not a valid number
  337 00000152 BF08 F04F 
              31FF             MOVEQ            R1, #0xFFFFFFFF
  338 00000158 D007            BEQ              FINISH_WAIT
  339 0000015A         ; If it is a valid number
  340 0000015A F04F 050A       MOV              R5, #10
  341 0000015E FB01 F105       MUL              R1, R1, R5
  342 00000162 4401            ADD              R1, R1, R0
  343 00000164 F1A4 0401       SUB              R4, R4, #1
  344 00000168 E7EB            B                LOOP_WAIT
  345 0000016A         
  346 0000016A E8BD 403D 
                       FINISH_WAIT
                               POP              {R0, R2-R5, LR}
  347 0000016E 4770            BX               LR
  348 00000170         
  349 00000170                 ENDP
  350 00000170         
  351 00000170         ;**********************************************
  352 00000170         ; Check to see if an address holds the Command
  353 00000170         ; LEDx, for example (‘LED2FF8800') in which the program 
                       should change the 
  354 00000170         ; color of LED numbered 2 and to color FF8800
  355 00000170         ; 
  356 00000170         ; Parameters
  357 00000170         ;  R0 :  Address to examine
  358 00000170         ; 
  359 00000170         ; Returns
  360 00000170         ;   R1 :  number of the led



ARM Macro Assembler    Page 8 


  361 00000170         ;         0xFFFFFFFF if LEDx was NOT FOUND or invalid le
                       d number or invalid color number
  362 00000170         ; R3 : color to be changed
  363 00000170         ;
  364 00000170         ;**********************************************
  365 00000170         check_for_ledx
                               PROC
  366 00000170         
  367 00000170 B535            PUSH             {R0, R2, R4-R5, LR}
  368 00000172         
  369 00000172         ; Load the 4 character string starting at R0
  370 00000172         ; into a register
  371 00000172 6802            LDR              R2, [R0]
  372 00000174 F022 427F       AND              R2, R2, #0x00FFFFFF
  373 00000178         
  374 00000178         ; Load 'LED' to R3
  375 00000178 F244 534C 
              F2C0 0344        MOV32            R3, LED_STR
  376 00000180         
  377 00000180         ; Check to see if the resulting value is 
  378 00000180         ; equal to 'LED'
  379 00000180 429A            CMP              R2, R3
  380 00000182         
  381 00000182         ; Set the return value
  382 00000182 BF1C F04F 
              31FF             MOVNE            R1, #0xFFFFFFFF
  383 00000188 F000 F825       BLNE             FINISH_LED
  384 0000018C         
  385 0000018C         ; R2 Stores address of LEDx 
  386 0000018C 4602            MOV              R2, R0
  387 0000018E         
  388 0000018E         ; Check to see if there is valid led number after 'LED'
  389 0000018E 78D0            LDRB             R0, [R2, #BYTE*3]
  390 00000190 F7FF FFFE       BL               hw1_ascii_to_dec
  391 00000194 F1B0 3FFF       CMP              R0, #0xFFFFFFFF
  392 00000198         ; If it is not a valid LED number
  393 00000198 BF08 F04F 
              31FF             MOVEQ            R1, #0xFFFFFFFF
  394 0000019E D01A            BEQ              FINISH_LED
  395 000001A0         ; If it is a valid LED number
  396 000001A0 4601            MOV              R1, R0
  397 000001A2         
  398 000001A2         ; Check to see if there is valid hex color decimal after
                        'LEDx'
  399 000001A2         ; R2 Stores address of Color hex
  400 000001A2 F102 0209       ADD              R2, R2, #BYTE*9
  401 000001A6         ; R4 Stores counts of loop iteration
  402 000001A6 F04F 0406       MOV              R4, #6
  403 000001AA         ; R3 Stores hex value
  404 000001AA F04F 0300       MOV              R3, #0
  405 000001AE         LOOP_LED
  406 000001AE 2C00            CMP              R4, #0
  407 000001B0 D011            BEQ              FINISH_LED
  408 000001B2 F812 0901       LDRB             R0, [R2], #-1
  409 000001B6 F7FF FFFE       BL               hw1_ascii_to_hex
  410 000001BA F1B0 3FFF       CMP              R0, #0xFFFFFFFF
  411 000001BE         ; If it is not a valid hex
  412 000001BE BF08 F04F 
              31FF             MOVEQ            R1, #0xFFFFFFFF



ARM Macro Assembler    Page 9 


  413 000001C4 D007            BEQ              FINISH_LED
  414 000001C6         ; If it is a valid hex
  415 000001C6 F04F 0510       MOV              R5, #16
  416 000001CA FB03 F305       MUL              R3, R3, R5
  417 000001CE 4403            ADD              R3, R3, R0
  418 000001D0 F1A4 0401       SUB              R4, R4, #1
  419 000001D4 E7EB            B                LOOP_LED
  420 000001D6         
  421 000001D6 E8BD 4035 
                       FINISH_LED
                               POP              {R0, R2, R4-R5, LR}
  422 000001DA 4770            BX               LR
  423 000001DC         
  424 000001DC                 ENDP
  425 000001DC         
  426 000001DC         ;**********************************************
  427 000001DC         ; This function will search through memory a byte at a t
                       ime looking for valid DISPLAY
  428 000001DC         ; commands. When a valid DISPLAY command is found, carry
                        out the corresponding
  429 000001DC         ; behavior. This function will examine memory until and 
                       STOP command
  430 000001DC         ; is found.
  431 000001DC         ; Parameters
  432 000001DC         ; R0 : The starting address of the memory that contains 
                       the commands to update the
  433 000001DC         ; LEDs.
  434 000001DC         ;
  435 000001DC         ; Return
  436 000001DC         ; Nothing
  437 000001DC         ;********************************************** 
  438 000001DC         hw1_search_memory
                               PROC
  439 000001DC         
  440 000001DC B50F            PUSH             {R0-R3, LR}
  441 000001DE         
  442 000001DE         ; R2 stores the current address of the command
  443 000001DE 4602            MOV              R2, R0
  444 000001E0         
  445 000001E0         ; check for STOP
  446 000001E0 4610    LOOP    MOV              R0, R2
  447 000001E2 F7FF FFFE       BL               check_for_stop
  448 000001E6 2900            CMP              R1, #0
  449 000001E8 D020            BEQ              STOP
  450 000001EA         
  451 000001EA         ; check for INIT
  452 000001EA 4610            MOV              R0, R2
  453 000001EC F7FF FFFE       BL               check_for_init
  454 000001F0 2900            CMP              R1, #0
  455 000001F2 BF08 F7FF 
              FFFE             BLEQ             hw1_init
  456 000001F8         
  457 000001F8         ; check for WAIT
  458 000001F8 4610            MOV              R0, R2
  459 000001FA F7FF FFFE       BL               check_for_wait
  460 000001FE F1B1 3FFF       CMP              R1, #0xFFFFFFFF
  461 00000202 BF1F 4608       MOVNE            R0, R1
  462 00000206 F242 7310       MOVNE            R3, #10000
  463 0000020A FB00 F003       MULNE            R0, R0, R3



ARM Macro Assembler    Page 10 


  464 0000020E F7FF FFFE       BLNE             hw1_wait
  465 00000212         
  466 00000212         ; check for LEDx
  467 00000212 4610            MOV              R0, R2
  468 00000214 F7FF FFFE       BL               check_for_ledx
  469 00000218 F1B1 3FFF       CMP              R1, #0xFFFFFFFF
  470 0000021C BF1E 4608       MOVNE            R0, R1
  471 00000220 4619            MOVNE            R1, R3
  472 00000222 F7FF FFFE       BLNE             hw1_ledx
  473 00000226         
  474 00000226         ; Increment the current address of the command
  475 00000226 F102 0201       ADD              R2, R2, #1
  476 0000022A         
  477 0000022A E7D9            B                LOOP
  478 0000022C         
  479 0000022C         
  480 0000022C         STOP
  481 0000022C         
  482 0000022C E8BD 400F       POP              {R0-R3, LR}
  483 00000230         
  484 00000230 4770            BX               LR
  485 00000232                 ENDP
  486 00000232         
  487 00000232 00 00           align
  488 00000234         
  489 00000234                 END
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\obj\hw1.d -o.\obj\hw1.o -I.\RTE\_HW1 -IC:\Keil_v5\ARM\PACK\AR
M\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\In
clude\TM4C123 --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --pre
define="__UVISION_VERSION SETA 524" --predefine="_RTE_ SETA 1" --predefine="TM4
C123GH6PM SETA 1" --list=.\lst\hw1.lst hw1.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

LED_ARRAY 00000000

Symbol: LED_ARRAY
   Definitions
      At line 22 in file hw1.s
   Uses
      At line 43 in file hw1.s
      At line 140 in file hw1.s
      At line 175 in file hw1.s

SRAM 00000000

Symbol: SRAM
   Definitions
      At line 21 in file hw1.s
   Uses
      None
Comment: SRAM unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DONE 0000006A

Symbol: DONE
   Definitions
      At line 95 in file hw1.s
   Uses
      At line 73 in file hw1.s
      At line 83 in file hw1.s
      At line 93 in file hw1.s

FINISH_LED 000001D6

Symbol: FINISH_LED
   Definitions
      At line 421 in file hw1.s
   Uses
      At line 383 in file hw1.s
      At line 394 in file hw1.s
      At line 407 in file hw1.s
      At line 413 in file hw1.s

FINISH_WAIT 0000016A

Symbol: FINISH_WAIT
   Definitions
      At line 346 in file hw1.s
   Uses
      At line 321 in file hw1.s
      At line 332 in file hw1.s
      At line 338 in file hw1.s

FLASH 00000000

Symbol: FLASH
   Definitions
      At line 28 in file hw1.s
   Uses
      None
Comment: FLASH unused
LOOP 000001E0

Symbol: LOOP
   Definitions
      At line 446 in file hw1.s
   Uses
      At line 477 in file hw1.s
Comment: LOOP used once
LOOP_LED 000001AE

Symbol: LOOP_LED
   Definitions
      At line 405 in file hw1.s
   Uses
      At line 419 in file hw1.s
Comment: LOOP_LED used once
LOOP_WAIT 00000142

Symbol: LOOP_WAIT
   Definitions



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 330 in file hw1.s
   Uses
      At line 344 in file hw1.s
Comment: LOOP_WAIT used once
STOP 0000022C

Symbol: STOP
   Definitions
      At line 480 in file hw1.s
   Uses
      At line 449 in file hw1.s
Comment: STOP used once
WAIT_LOOP 000000DE

Symbol: WAIT_LOOP
   Definitions
      At line 210 in file hw1.s
   Uses
      At line 212 in file hw1.s
Comment: WAIT_LOOP used once
check_for_init 000000EA

Symbol: check_for_init
   Definitions
      At line 228 in file hw1.s
   Uses
      At line 453 in file hw1.s
Comment: check_for_init used once
check_for_ledx 00000170

Symbol: check_for_ledx
   Definitions
      At line 365 in file hw1.s
   Uses
      At line 468 in file hw1.s
Comment: check_for_ledx used once
check_for_stop 00000104

Symbol: check_for_stop
   Definitions
      At line 266 in file hw1.s
   Uses
      At line 447 in file hw1.s
Comment: check_for_stop used once
check_for_wait 0000011E

Symbol: check_for_wait
   Definitions
      At line 304 in file hw1.s
   Uses
      At line 459 in file hw1.s
Comment: check_for_wait used once
hw1_ascii_to_dec 00000070

Symbol: hw1_ascii_to_dec
   Definitions
      At line 112 in file hw1.s
   Uses
      At line 334 in file hw1.s



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols

      At line 390 in file hw1.s

hw1_ascii_to_hex 00000012

Symbol: hw1_ascii_to_hex
   Definitions
      At line 63 in file hw1.s
   Uses
      At line 409 in file hw1.s
Comment: hw1_ascii_to_hex used once
hw1_init 0000008A

Symbol: hw1_init
   Definitions
      At line 137 in file hw1.s
   Uses
      At line 455 in file hw1.s
Comment: hw1_init used once
hw1_ledx 000000B8

Symbol: hw1_ledx
   Definitions
      At line 171 in file hw1.s
   Uses
      At line 472 in file hw1.s
Comment: hw1_ledx used once
hw1_search_memory 000001DC

Symbol: hw1_search_memory
   Definitions
      At line 438 in file hw1.s
   Uses
      At line 4 in file hw1.s
Comment: hw1_search_memory used once
hw1_update_leds 00000000

Symbol: hw1_update_leds
   Definitions
      At line 40 in file hw1.s
   Uses
      At line 150 in file hw1.s
      At line 187 in file hw1.s

hw1_wait 000000DA

Symbol: hw1_wait
   Definitions
      At line 207 in file hw1.s
   Uses
      At line 464 in file hw1.s
Comment: hw1_wait used once
20 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BYTE 00000001

Symbol: BYTE
   Definitions
      At line 10 in file hw1.s
   Uses
      At line 22 in file hw1.s
      At line 325 in file hw1.s
      At line 389 in file hw1.s
      At line 400 in file hw1.s

HALF 00000002

Symbol: HALF
   Definitions
      At line 9 in file hw1.s
   Uses
      At line 181 in file hw1.s
      At line 183 in file hw1.s

INIT_STR 54494E49

Symbol: INIT_STR
   Definitions
      At line 13 in file hw1.s
   Uses
      At line 237 in file hw1.s
Comment: INIT_STR used once
LED_STR 0044454C

Symbol: LED_STR
   Definitions
      At line 16 in file hw1.s
   Uses
      At line 375 in file hw1.s
Comment: LED_STR used once
STOP_STR 504F5453

Symbol: STOP_STR
   Definitions
      At line 15 in file hw1.s
   Uses
      At line 275 in file hw1.s
Comment: STOP_STR used once
WAIT_STR 54494157

Symbol: WAIT_STR
   Definitions
      At line 14 in file hw1.s
   Uses
      At line 313 in file hw1.s
Comment: WAIT_STR used once
WORD 00000004

Symbol: WORD
   Definitions
      At line 8 in file hw1.s
   Uses
      At line 143 in file hw1.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Absolute symbols

      At line 144 in file hw1.s
      At line 145 in file hw1.s
      At line 146 in file hw1.s
      At line 147 in file hw1.s
      At line 148 in file hw1.s

7 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

WS2812B_write 00000000

Symbol: WS2812B_write
   Definitions
      At line 5 in file hw1.s
   Uses
      At line 45 in file hw1.s
Comment: WS2812B_write used once
1 symbol
368 symbols in table
