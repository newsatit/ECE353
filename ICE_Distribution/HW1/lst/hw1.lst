


ARM Macro Assembler    Page 1 


    1 00000000         ; hw1.s ECE353
    2 00000000         
    3 00000000         
    4 00000000                 export           hw1_search_memory
    5 00000000                 import           WS2812B_write
    6 00000000         
    7 00000000         ; String constants  
    8 00000000 00000004 
                       WORD    EQU              4
    9 00000000 00000002 
                       HALF    EQU              2
   10 00000000 00000001 
                       BYTE    EQU              1
   11 00000000         
   12 00000000         ;**********************************************
   13 00000000         ; SRAM
   14 00000000         ;**********************************************
   15 00000000                 AREA             SRAM, READWRITE
   16 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 LED_ARRAY
                               SPACE            BYTE*24     ; 3 byte color of e
                                                            ach of the 8 LEDS
   17 00000018                 align
   18 00000018         
   19 00000018         ;**********************************************
   20 00000018         ; Constant Variables (FLASH) Segment
   21 00000018         ;**********************************************
   22 00000018                 AREA             FLASH, CODE, READONLY
   23 00000000         
   24 00000000         ;**********************************************
   25 00000000         ; Updates the WS2812B LEDs with the current values in th
                       e LED_ARRAY. Use the
   26 00000000         ; supplied function WS2812B_write to update the colors. 
                       
   27 00000000         ; 
   28 00000000         ; Parameters
   29 00000000         ; NONE
   30 00000000         ;
   31 00000000         ; Return
   32 00000000         ; Nothing
   33 00000000         ;********************************************** 
   34 00000000         hw1_update_leds
                               PROC
   35 00000000 B506            PUSH             {R1, R2, LR}
   36 00000002         
   37 00000002 497B            LDR              R1, =(LED_ARRAY)
   38 00000004 F04F 0208       MOV              R2, #8
   39 00000008 F7FF FFFE       BL               WS2812B_write
   40 0000000C         
   41 0000000C E8BD 4006       POP              {R1, R2, LR}
   42 00000010         
   43 00000010 4770            BX               LR
   44 00000012                 ENDP



ARM Macro Assembler    Page 2 


   45 00000012         
   46 00000012         ; TODO  
   47 00000012         
   48 00000012         ;**********************************************
   49 00000012         ; Converts A ASCII HEX character to its 
   50 00000012         ; numerical value.  Valid characters are 0-9,a-f,A-F.
   51 00000012         ; 
   52 00000012         ; Parameters
   53 00000012         ;  R0 : ASCII Char
   54 00000012         ;
   55 00000012         ; Returns
   56 00000012         ; R0 :  numerical value.  
   57 00000012         ;   If invalid, return 0xFFFFFFFF
   58 00000012         ;**********************************************  
   59 00000012         hw1_ascii_to_hex
                               PROC
   60 00000012 B404            PUSH             {R2}
   61 00000014         
   62 00000014         ; Check for 0-9
   63 00000014 F1A0 0230       SUB              R2, R0, #0x30
   64 00000018 2A00            CMP              R2, #0
   65 0000001A BFB8 F04F 
              32FF             MOVLT            R2, #0xFFFFFFFF
   66 00000020 2A09            CMP              R2, #9
   67 00000022 BFC8 F04F 
              32FF             MOVGT            R2, #0xFFFFFFFF
   68 00000028 F1B2 3FFF       CMP              R2, #0xFFFFFFFF
   69 0000002C D11D            BNE              DONE
   70 0000002E         
   71 0000002E         ; Check for a-f
   72 0000002E F1A0 0261       SUB              R2, R0, #0x61
   73 00000032 2A00            CMP              R2, #0
   74 00000034 BFB8 F04F 
              32FF             MOVLT            R2, #0xFFFFFFFF
   75 0000003A 2A05            CMP              R2, #5
   76 0000003C BFC8 F04F 
              32FF             MOVGT            R2, #0xFFFFFFFF
   77 00000042 F1B2 3FFF       CMP              R2, #0xFFFFFFFF
   78 00000046 BF18 320A       ADDNE            R2, #10
   79 0000004A D10E            BNE              DONE
   80 0000004C         
   81 0000004C         ; check for A-F
   82 0000004C F1A0 0241       SUB              R2, R0, #0x41
   83 00000050 2A00            CMP              R2, #0
   84 00000052 BFB8 F04F 
              32FF             MOVLT            R2, #0xFFFFFFFF
   85 00000058 2A05            CMP              R2, #5
   86 0000005A BFC8 F04F 
              32FF             MOVGT            R2, #0xFFFFFFFF
   87 00000060 F1B2 3FFF       CMP              R2, #0xFFFFFFFF
   88 00000064 BF18 320A       ADDNE            R2, #10
   89 00000068 D1FF            BNE              DONE
   90 0000006A         
   91 0000006A 4610    DONE    MOV              R0, R2
   92 0000006C BC04            POP              {R2}
   93 0000006E         
   94 0000006E 4770            BX               LR
   95 00000070                 ENDP
   96 00000070         



ARM Macro Assembler    Page 3 


   97 00000070         ;**********************************************
   98 00000070         ; Converts A single ASCII Decimal character to its 
   99 00000070         ; numerical value.  Valid characters are 0-9.
  100 00000070         ; 
  101 00000070         ; Parameters
  102 00000070         ;  R0 : ASCII Char
  103 00000070         ;
  104 00000070         ; Returns
  105 00000070         ; R0 :  numerical value.  
  106 00000070         ;   If invalid, return 0xFFFFFFFF
  107 00000070         ;**********************************************
  108 00000070         ascii_to_dec
                               PROC
  109 00000070         
  110 00000070 B404            PUSH             {R2}
  111 00000072         
  112 00000072 F1A0 0030       SUB              R0, R0, #0x30
  113 00000076 2800            CMP              R0, #0
  114 00000078 BFB8 F04F 
              30FF             MOVLT            R0, #0xFFFFFFFF
  115 0000007E 2809            CMP              R0, #9
  116 00000080 BFC8 F04F 
              30FF             MOVGT            R0, #0xFFFFFFFF
  117 00000086         
  118 00000086 BC04            POP              {R2}
  119 00000088         
  120 00000088 4770            BX               LR
  121 0000008A                 ENDP
  122 0000008A         
  123 0000008A         ;**********************************************
  124 0000008A         ; Turns off all of the WSB28128 by writing 
  125 0000008A         ; 0x000000 to each LED
  126 0000008A         ;
  127 0000008A         ; Parameters
  128 0000008A         ; NONE
  129 0000008A         ;
  130 0000008A         ; Return
  131 0000008A         ; Nothing
  132 0000008A         ;**********************************************
  133 0000008A         hw1_init
                               PROC
  134 0000008A B403            PUSH             {R0, R1}
  135 0000008C         
  136 0000008C 4858            LDR              R0, =(LED_ARRAY)
  137 0000008E F240 0100 
              F2C0 0100        MOV32            R1, #0
  138 00000096         ; initialyze 4 bytes of LED_ARRAY 6 TIMES
  139 00000096 F840 1B04       STR              R1, [R0], #WORD
  140 0000009A F840 1B04       STR              R1, [R0], #WORD
  141 0000009E F840 1B04       STR              R1, [R0], #WORD
  142 000000A2 F840 1B04       STR              R1, [R0], #WORD
  143 000000A6 F840 1B04       STR              R1, [R0], #WORD
  144 000000AA F840 1B04       STR              R1, [R0], #WORD
  145 000000AE         
  146 000000AE BC03            POP              {R0, R1}
  147 000000B0         
  148 000000B0 4770            BX               LR
  149 000000B2                 ENDP
  150 000000B2         



ARM Macro Assembler    Page 4 


  151 000000B2         ;**********************************************
  152 000000B2         ; Updates the color of the specified LED. 
  153 000000B2         ; All other LEDs should maintain their current
  154 000000B2         ; color. Makes use of the hw1_update_leds to 
  155 000000B2         ; update the color of the LEDs.
  156 000000B2         ;
  157 000000B2         ; Parameters
  158 000000B2         ; R0 – LED number to be updated
  159 000000B2         ; R1 – An unsigned 32bit number. Bits 31-24 are unused. 
                       
  160 000000B2         ; Bits 23-0 represent the color value to write to the LE
                       D.
  161 000000B2         ;
  162 000000B2         ; Return
  163 000000B2         ; Nothing
  164 000000B2         ;********************************************** 
  165 000000B2         hw1_ledx
                               PROC
  166 000000B2         
  167 000000B2 B40E            PUSH             {R1-R3}
  168 000000B4         ; R2 Stores stores the adress of LED_ARRAY
  169 000000B4 4A4E            LDR              R2, =(LED_ARRAY)
  170 000000B6 F04F 0303       MOV              R3, #3
  171 000000BA         ; offset from LED_ARRAY
  172 000000BA FB03 F300       MUL              R3, R3, R0
  173 000000BE 441A            ADD              R2, R2, R3
  174 000000C0         ; set bits 0-15
  175 000000C0 F822 1B02       STRH             R1, [R2], #HALF
  176 000000C4         ; set bits 16-23
  177 000000C4 EA4F 4111       LSR              R1, R1, #HALF*8
  178 000000C8 7011            STRB             R1, [R2]
  179 000000CA         
  180 000000CA BC0E            POP              {R1-R3}
  181 000000CC         
  182 000000CC 4770            BX               LR
  183 000000CE                 ENDP
  184 000000CE         
  185 000000CE         
  186 000000CE         ; check with unsigned 
  187 000000CE         ;**********************************************
  188 000000CE         ; Delays the examination of the next memory address 
  189 000000CE         ; by a variable amount of time.
  190 000000CE         ;
  191 000000CE         ; Parameters
  192 000000CE         ; R0 – A 32-bit unsigned number representing the number 
                       of iterations 
  193 000000CE         ; of an empty for loop that must be executed.
  194 000000CE         ;
  195 000000CE         ; Return
  196 000000CE         ; Nothing
  197 000000CE         ;********************************************** 
  198 000000CE         hw1_wait
                               PROC
  199 000000CE B402            PUSH             {R1}
  200 000000D0 4601            MOV              R1, R0
  201 000000D2 2900    LOOP    CMP              R1, #0
  202 000000D4 F1A1 0101       SUB              R1, R1, #1
  203 000000D8 DCFB            BGT              LOOP
  204 000000DA BC02            POP              {R1}



ARM Macro Assembler    Page 5 


  205 000000DC 4770            BX               LR
  206 000000DE                 ENDP
  207 000000DE         
  208 000000DE         ; TODO
  209 000000DE         
  210 000000DE         ;**********************************************
  211 000000DE         ; This function will search through memory a byte at a t
                       ime looking for valid DISPLAY
  212 000000DE         ; commands. When a valid DISPLAY command is found, carry
                        out the corresponding
  213 000000DE         ; behavior. This function will examine memory until and 
                       STOP command
  214 000000DE         ; is found.
  215 000000DE         ; Parameters
  216 000000DE         ; R0 : The starting address of the memory that contains 
                       the commands to update the
  217 000000DE         ; LEDs.
  218 000000DE         ;
  219 000000DE         ; Return
  220 000000DE         ; Nothing
  221 000000DE         ;********************************************** 
  222 000000DE         hw1_search_memory
                               PROC
  223 000000DE B402            PUSH             {R1}
  224 000000E0         
  225 000000E0 F04F 002F       MOV              R0, #0x2F   ; false
  226 000000E4 F7FF FFFE       BL               hw1_ascii_to_hex
  227 000000E8 F04F 0030       MOV              R0, #0x30   ; 0
  228 000000EC F7FF FFFE       BL               hw1_ascii_to_hex
  229 000000F0 F04F 0031       MOV              R0, #0x31   ; 1
  230 000000F4 F7FF FFFE       BL               hw1_ascii_to_hex
  231 000000F8 F04F 0038       MOV              R0, #0x38   ; 8
  232 000000FC F7FF FFFE       BL               hw1_ascii_to_hex
  233 00000100 F04F 0039       MOV              R0, #0x39   ; 9
  234 00000104 F7FF FFFE       BL               hw1_ascii_to_hex
  235 00000108 F04F 003A       MOV              R0, #0x3A   ; False
  236 0000010C F7FF FFFE       BL               hw1_ascii_to_hex
  237 00000110 F04F 0040       MOV              R0, #0x40   ; False
  238 00000114 F7FF FFFE       BL               hw1_ascii_to_hex
  239 00000118 F04F 0041       MOV              R0, #0x41   ; 10
  240 0000011C F7FF FFFE       BL               hw1_ascii_to_hex
  241 00000120 F04F 0046       MOV              R0, #0x46   ; 15
  242 00000124 F7FF FFFE       BL               hw1_ascii_to_hex
  243 00000128 F04F 0047       MOV              R0, #0x47   ; false
  244 0000012C F7FF FFFE       BL               hw1_ascii_to_hex
  245 00000130 F04F 0060       MOV              R0, #0x60   ; false
  246 00000134 F7FF FFFE       BL               hw1_ascii_to_hex
  247 00000138 F04F 0061       MOV              R0, #0x61   ; 10
  248 0000013C F7FF FFFE       BL               hw1_ascii_to_hex
  249 00000140 F04F 0066       MOV              R0, #0x66   ; 15
  250 00000144 F7FF FFFE       BL               hw1_ascii_to_hex
  251 00000148 F04F 0067       MOV              R0, #0x67   ; false
  252 0000014C F7FF FFFE       BL               hw1_ascii_to_hex
  253 00000150         
  254 00000150 F7FF FFFE       BL               hw1_init
  255 00000154 F7FF FFFE       BL               hw1_update_leds
  256 00000158         
  257 00000158 F240 30E8 
              F2C0 0000        MOV32            R0, #1000



ARM Macro Assembler    Page 6 


  258 00000160 F242 7110 
              F2C0 0100        MOV32            R1, #10000
  259 00000168 FB00 F001       MUL              R0, R0, R1
  260 0000016C F7FF FFFE       BL               hw1_wait
  261 00000170         
  262 00000170 F04F 0001       MOV              R0, #1
  263 00000174 F240 0100 
              F2C0 01FF        MOV32            R1, #0x00FF0000
  264 0000017C F7FF FFFE       BL               hw1_ledx
  265 00000180 F7FF FFFE       BL               hw1_update_leds
  266 00000184         
  267 00000184 F240 30E8 
              F2C0 0000        MOV32            R0, #1000
  268 0000018C F242 7110 
              F2C0 0100        MOV32            R1, #10000
  269 00000194 FB00 F001       MUL              R0, R0, R1
  270 00000198 F7FF FFFE       BL               hw1_wait
  271 0000019C         
  272 0000019C F04F 0007       MOV              R0, #7
  273 000001A0 F64F 7100 
              F2C0 01FF        MOV32            R1, #0x00FFFF00
  274 000001A8 F7FF FFFE       BL               hw1_ledx
  275 000001AC F7FF FFFE       BL               hw1_update_leds
  276 000001B0         
  277 000001B0 F240 30E8 
              F2C0 0000        MOV32            R0, #1000
  278 000001B8 F242 7110 
              F2C0 0100        MOV32            R1, #10000
  279 000001C0 FB00 F001       MUL              R0, R0, R1
  280 000001C4 F7FF FFFE       BL               hw1_wait
  281 000001C8         
  282 000001C8 F7FF FFFE       BL               hw1_init
  283 000001CC F7FF FFFE       BL               hw1_update_leds
  284 000001D0         
  285 000001D0 F240 30E8 
              F2C0 0000        MOV32            R0, #1000
  286 000001D8 F242 7110 
              F2C0 0100        MOV32            R1, #10000
  287 000001E0 FB00 F001       MUL              R0, R0, R1
  288 000001E4 F7FF FFFE       BL               hw1_wait
  289 000001E8         
  290 000001E8 BC02            POP              {R1}
  291 000001EA         
  292 000001EA         INFINITE_LOOP
  293 000001EA E7FE            B                INFINITE_LOOP
  294 000001EC         
  295 000001EC 4770            BX               LR
  296 000001EE                 ENDP
  297 000001EE         
  298 000001EE 00 00           align
  299 000001F0         
  300 000001F0                 END
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\obj\hw1.d -o.\obj\hw1.o -I.\RTE\_HW1 -IC:\Keil_v5\ARM\PACK\AR
M\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Device\In
clude\TM4C123 --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --pre
define="__UVISION_VERSION SETA 524" --predefine="_RTE_ SETA 1" --predefine="TM4
C123GH6PM SETA 1" --list=.\lst\hw1.lst hw1.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

LED_ARRAY 00000000

Symbol: LED_ARRAY
   Definitions
      At line 16 in file hw1.s
   Uses
      At line 37 in file hw1.s
      At line 136 in file hw1.s
      At line 169 in file hw1.s

SRAM 00000000

Symbol: SRAM
   Definitions
      At line 15 in file hw1.s
   Uses
      None
Comment: SRAM unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DONE 0000006A

Symbol: DONE
   Definitions
      At line 91 in file hw1.s
   Uses
      At line 69 in file hw1.s
      At line 79 in file hw1.s
      At line 89 in file hw1.s

FLASH 00000000

Symbol: FLASH
   Definitions
      At line 22 in file hw1.s
   Uses
      None
Comment: FLASH unused
INFINITE_LOOP 000001EA

Symbol: INFINITE_LOOP
   Definitions
      At line 292 in file hw1.s
   Uses
      At line 293 in file hw1.s
Comment: INFINITE_LOOP used once
LOOP 000000D2

Symbol: LOOP
   Definitions
      At line 201 in file hw1.s
   Uses
      At line 203 in file hw1.s
Comment: LOOP used once
ascii_to_dec 00000070

Symbol: ascii_to_dec
   Definitions
      At line 108 in file hw1.s
   Uses
      None
Comment: ascii_to_dec unused
hw1_ascii_to_hex 00000012

Symbol: hw1_ascii_to_hex
   Definitions
      At line 59 in file hw1.s
   Uses
      At line 226 in file hw1.s
      At line 228 in file hw1.s
      At line 230 in file hw1.s
      At line 232 in file hw1.s
      At line 234 in file hw1.s
      At line 236 in file hw1.s
      At line 238 in file hw1.s
      At line 240 in file hw1.s
      At line 242 in file hw1.s
      At line 244 in file hw1.s
      At line 246 in file hw1.s



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

      At line 248 in file hw1.s
      At line 250 in file hw1.s
      At line 252 in file hw1.s

hw1_init 0000008A

Symbol: hw1_init
   Definitions
      At line 133 in file hw1.s
   Uses
      At line 254 in file hw1.s
      At line 282 in file hw1.s

hw1_ledx 000000B2

Symbol: hw1_ledx
   Definitions
      At line 165 in file hw1.s
   Uses
      At line 264 in file hw1.s
      At line 274 in file hw1.s

hw1_search_memory 000000DE

Symbol: hw1_search_memory
   Definitions
      At line 222 in file hw1.s
   Uses
      At line 4 in file hw1.s
Comment: hw1_search_memory used once
hw1_update_leds 00000000

Symbol: hw1_update_leds
   Definitions
      At line 34 in file hw1.s
   Uses
      At line 255 in file hw1.s
      At line 265 in file hw1.s
      At line 275 in file hw1.s
      At line 283 in file hw1.s

hw1_wait 000000CE

Symbol: hw1_wait
   Definitions
      At line 198 in file hw1.s
   Uses
      At line 260 in file hw1.s
      At line 270 in file hw1.s
      At line 280 in file hw1.s
      At line 288 in file hw1.s

11 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BYTE 00000001

Symbol: BYTE
   Definitions
      At line 10 in file hw1.s
   Uses
      At line 16 in file hw1.s
Comment: BYTE used once
HALF 00000002

Symbol: HALF
   Definitions
      At line 9 in file hw1.s
   Uses
      At line 175 in file hw1.s
      At line 177 in file hw1.s

WORD 00000004

Symbol: WORD
   Definitions
      At line 8 in file hw1.s
   Uses
      At line 139 in file hw1.s
      At line 140 in file hw1.s
      At line 141 in file hw1.s
      At line 142 in file hw1.s
      At line 143 in file hw1.s
      At line 144 in file hw1.s

3 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

WS2812B_write 00000000

Symbol: WS2812B_write
   Definitions
      At line 5 in file hw1.s
   Uses
      At line 39 in file hw1.s
Comment: WS2812B_write used once
1 symbol
355 symbols in table
