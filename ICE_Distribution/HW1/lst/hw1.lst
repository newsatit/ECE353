


ARM Macro Assembler    Page 1 


    1 00000000         ; hw1.s ECE353
    2 00000000         
    3 00000000         
    4 00000000                 export           hw1_search_memory
    5 00000000                 import           WS2812B_write
    6 00000000         
    7 00000000         ; String constants  
    8 00000000 00000004 
                       WORD    EQU              4
    9 00000000 00000002 
                       HALF    EQU              2
   10 00000000 00000001 
                       BYTE    EQU              1
   11 00000000         
   12 00000000         ; String constansts to check for commands
   13 00000000 54494E49 
                       INIT_STR
                               EQU              0x54494E49
   14 00000000 54494157 
                       WAIT_STR
                               EQU              0x54494157
   15 00000000 504F5453 
                       STOP_STR
                               EQU              0x504F5453
   16 00000000         
   17 00000000         ;**********************************************
   18 00000000         ; SRAM
   19 00000000         ;**********************************************
   20 00000000                 AREA             SRAM, READWRITE
   21 00000000 00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 
              00 00 00 LED_ARRAY
                               SPACE            BYTE*24     ; 3 byte color of e
                                                            ach of the 8 LEDS
   22 00000018                 align
   23 00000018         
   24 00000018         ;**********************************************
   25 00000018         ; Constant Variables (FLASH) Segment
   26 00000018         ;**********************************************
   27 00000018                 AREA             FLASH, CODE, READONLY
   28 00000000         
   29 00000000         ;**********************************************
   30 00000000         ; Updates the WS2812B LEDs with the current values in th
                       e LED_ARRAY. Use the
   31 00000000         ; supplied function WS2812B_write to update the colors. 
                       
   32 00000000         ; 
   33 00000000         ; Parameters
   34 00000000         ; NONE
   35 00000000         ;
   36 00000000         ; Return
   37 00000000         ; Nothing
   38 00000000         ;********************************************** 
   39 00000000         hw1_update_leds



ARM Macro Assembler    Page 2 


                               PROC
   40 00000000 B506            PUSH             {R1, R2, LR}
   41 00000002         
   42 00000002 494E            LDR              R1, =(LED_ARRAY)
   43 00000004 F04F 0208       MOV              R2, #8
   44 00000008 F7FF FFFE       BL               WS2812B_write
   45 0000000C         
   46 0000000C E8BD 4006       POP              {R1, R2, LR}
   47 00000010         
   48 00000010 4770            BX               LR
   49 00000012                 ENDP
   50 00000012         
   51 00000012         ;**********************************************
   52 00000012         ; Converts A ASCII HEX character to its 
   53 00000012         ; numerical value.  Valid characters are 0-9,a-f,A-F.
   54 00000012         ; 
   55 00000012         ; Parameters
   56 00000012         ;  R0 : ASCII Char
   57 00000012         ;
   58 00000012         ; Returns
   59 00000012         ; R0 :  numerical value.  
   60 00000012         ;   If invalid, return 0xFFFFFFFF
   61 00000012         ;**********************************************  
   62 00000012         hw1_ascii_to_hex
                               PROC
   63 00000012 B404            PUSH             {R2}
   64 00000014         
   65 00000014         ; Check for 0-9
   66 00000014 F1A0 0230       SUB              R2, R0, #0x30
   67 00000018 2A00            CMP              R2, #0
   68 0000001A BFB8 F04F 
              32FF             MOVLT            R2, #0xFFFFFFFF
   69 00000020 2A09            CMP              R2, #9
   70 00000022 BFC8 F04F 
              32FF             MOVGT            R2, #0xFFFFFFFF
   71 00000028 F1B2 3FFF       CMP              R2, #0xFFFFFFFF
   72 0000002C D11D            BNE              DONE
   73 0000002E         
   74 0000002E         ; Check for a-f
   75 0000002E F1A0 0261       SUB              R2, R0, #0x61
   76 00000032 2A00            CMP              R2, #0
   77 00000034 BFB8 F04F 
              32FF             MOVLT            R2, #0xFFFFFFFF
   78 0000003A 2A05            CMP              R2, #5
   79 0000003C BFC8 F04F 
              32FF             MOVGT            R2, #0xFFFFFFFF
   80 00000042 F1B2 3FFF       CMP              R2, #0xFFFFFFFF
   81 00000046 BF18 320A       ADDNE            R2, #10
   82 0000004A D10E            BNE              DONE
   83 0000004C         
   84 0000004C         ; check for A-F
   85 0000004C F1A0 0241       SUB              R2, R0, #0x41
   86 00000050 2A00            CMP              R2, #0
   87 00000052 BFB8 F04F 
              32FF             MOVLT            R2, #0xFFFFFFFF
   88 00000058 2A05            CMP              R2, #5
   89 0000005A BFC8 F04F 
              32FF             MOVGT            R2, #0xFFFFFFFF
   90 00000060 F1B2 3FFF       CMP              R2, #0xFFFFFFFF



ARM Macro Assembler    Page 3 


   91 00000064 BF18 320A       ADDNE            R2, #10
   92 00000068 D1FF            BNE              DONE
   93 0000006A         
   94 0000006A 4610    DONE    MOV              R0, R2
   95 0000006C BC04            POP              {R2}
   96 0000006E         
   97 0000006E 4770            BX               LR
   98 00000070                 ENDP
   99 00000070         
  100 00000070         ;**********************************************
  101 00000070         ; Converts A single ASCII Decimal character to its 
  102 00000070         ; numerical value.  Valid characters are 0-9.
  103 00000070         ; 
  104 00000070         ; Parameters
  105 00000070         ;  R0 : ASCII Char
  106 00000070         ;
  107 00000070         ; Returns
  108 00000070         ; R0 :  numerical value.  
  109 00000070         ;   If invalid, return 0xFFFFFFFF
  110 00000070         ;**********************************************
  111 00000070         ascii_to_dec
                               PROC
  112 00000070         
  113 00000070 B404            PUSH             {R2}
  114 00000072         
  115 00000072 F1A0 0030       SUB              R0, R0, #0x30
  116 00000076 2800            CMP              R0, #0
  117 00000078 BFB8 F04F 
              30FF             MOVLT            R0, #0xFFFFFFFF
  118 0000007E 2809            CMP              R0, #9
  119 00000080 BFC8 F04F 
              30FF             MOVGT            R0, #0xFFFFFFFF
  120 00000086         
  121 00000086 BC04            POP              {R2}
  122 00000088         
  123 00000088 4770            BX               LR
  124 0000008A                 ENDP
  125 0000008A         
  126 0000008A         ;**********************************************
  127 0000008A         ; Turns off all of the WSB28128 by writing 
  128 0000008A         ; 0x000000 to each LED
  129 0000008A         ;
  130 0000008A         ; Parameters
  131 0000008A         ; NONE
  132 0000008A         ;
  133 0000008A         ; Return
  134 0000008A         ; Nothing
  135 0000008A         ;**********************************************
  136 0000008A         hw1_init
                               PROC
  137 0000008A B403            PUSH             {R0, R1}
  138 0000008C         
  139 0000008C 482B            LDR              R0, =(LED_ARRAY)
  140 0000008E F240 0100 
              F2C0 0100        MOV32            R1, #0
  141 00000096         ; initialyze 4 bytes of LED_ARRAY 6 TIMES
  142 00000096 F840 1B04       STR              R1, [R0], #WORD
  143 0000009A F840 1B04       STR              R1, [R0], #WORD
  144 0000009E F840 1B04       STR              R1, [R0], #WORD



ARM Macro Assembler    Page 4 


  145 000000A2 F840 1B04       STR              R1, [R0], #WORD
  146 000000A6 F840 1B04       STR              R1, [R0], #WORD
  147 000000AA F840 1B04       STR              R1, [R0], #WORD
  148 000000AE         
  149 000000AE BC03            POP              {R0, R1}
  150 000000B0         
  151 000000B0 4770            BX               LR
  152 000000B2                 ENDP
  153 000000B2         
  154 000000B2         
  155 000000B2         ;**********************************************
  156 000000B2         ; Updates the color of the specified LED. 
  157 000000B2         ; All other LEDs should maintain their current
  158 000000B2         ; color. Makes use of the hw1_update_leds to 
  159 000000B2         ; update the color of the LEDs.
  160 000000B2         ;
  161 000000B2         ; Parameters
  162 000000B2         ; R0 – LED number to be updated
  163 000000B2         ; R1 – An unsigned 32bit number. Bits 31-24 are unused. 
                       
  164 000000B2         ; Bits 23-0 represent the color value to write to the LE
                       D.
  165 000000B2         ;
  166 000000B2         ; Return
  167 000000B2         ; Nothing
  168 000000B2         ;********************************************** 
  169 000000B2         hw1_ledx
                               PROC
  170 000000B2         
  171 000000B2 B40E            PUSH             {R1-R3}
  172 000000B4         ; R2 Stores stores the adress of LED_ARRAY
  173 000000B4 4A21            LDR              R2, =(LED_ARRAY)
  174 000000B6 F04F 0303       MOV              R3, #3
  175 000000BA         ; offset from LED_ARRAY
  176 000000BA FB03 F300       MUL              R3, R3, R0
  177 000000BE 441A            ADD              R2, R2, R3
  178 000000C0         ; set bits 0-15
  179 000000C0 F822 1B02       STRH             R1, [R2], #HALF
  180 000000C4         ; set bits 16-23
  181 000000C4 EA4F 4111       LSR              R1, R1, #HALF*8
  182 000000C8 7011            STRB             R1, [R2]
  183 000000CA         
  184 000000CA BC0E            POP              {R1-R3}
  185 000000CC         
  186 000000CC 4770            BX               LR
  187 000000CE                 ENDP
  188 000000CE         
  189 000000CE         
  190 000000CE         ; check with unsigned 
  191 000000CE         ;**********************************************
  192 000000CE         ; Delays the examination of the next memory address 
  193 000000CE         ; by a variable amount of time.
  194 000000CE         ;
  195 000000CE         ; Parameters
  196 000000CE         ; R0 – A 32-bit unsigned number representing the number 
                       of iterations 
  197 000000CE         ; of an empty for loop that must be executed.
  198 000000CE         ;
  199 000000CE         ; Return



ARM Macro Assembler    Page 5 


  200 000000CE         ; Nothing
  201 000000CE         ;********************************************** 
  202 000000CE         hw1_wait
                               PROC
  203 000000CE B402            PUSH             {R1}
  204 000000D0 4601            MOV              R1, R0
  205 000000D2 2900    WAIT_LOOP
                               CMP              R1, #0
  206 000000D4 F1A1 0101       SUB              R1, R1, #1
  207 000000D8 DCFB            BGT              WAIT_LOOP
  208 000000DA BC02            POP              {R1}
  209 000000DC 4770            BX               LR
  210 000000DE                 ENDP
  211 000000DE         
  212 000000DE         ; TODO
  213 000000DE         ;**********************************************
  214 000000DE         ; Check to see if an address holds the Command
  215 000000DE         ; 'INIT'
  216 000000DE         ; 
  217 000000DE         ; Parameters
  218 000000DE         ;  R0 :  Address to examine
  219 000000DE         ; 
  220 000000DE         ; Returns
  221 000000DE         ;   R1 :  0x00000000 if INIT was found
  222 000000DE         ;         0xFFFFFFFF if INIT was NOT FOUND 
  223 000000DE         ;**********************************************
  224 000000DE         check_for_init
                               PROC
  225 000000DE         
  226 000000DE B40C            PUSH             {R2, R3}
  227 000000E0         
  228 000000E0         ; Load the 4 character string starting at R0
  229 000000E0         ; into a register
  230 000000E0 6802            LDR              R2, [R0]
  231 000000E2         
  232 000000E2         ; Load 'INIT' to R3
  233 000000E2 F644 6349 
              F2C5 4349        MOV32            R3, INIT_STR
  234 000000EA         
  235 000000EA         ; Check to see if the resulting value is 
  236 000000EA         ; equal to 'INIT'
  237 000000EA 429A            CMP              R2, R3
  238 000000EC         
  239 000000EC         ; Set the return value
  240 000000EC BF0C 2100       MOVEQ            R1, #0x00000000
  241 000000F0 F04F 31FF       MOVNE            R1, #0xFFFFFFFF
  242 000000F4         
  243 000000F4 BC0C            POP              {R2, R3}
  244 000000F6         
  245 000000F6         ; Return
  246 000000F6 4770            BX               LR
  247 000000F8         
  248 000000F8                 ENDP
  249 000000F8         
  250 000000F8         ; TODO
  251 000000F8         ;**********************************************
  252 000000F8         ; Check to see if an address holds the Command
  253 000000F8         ; 'STOP' in which the program should enter
  254 000000F8         ; infinite loop



ARM Macro Assembler    Page 6 


  255 000000F8         ; 
  256 000000F8         ; Parameters
  257 000000F8         ;  R0 :  Address to examine
  258 000000F8         ; 
  259 000000F8         ; Returns
  260 000000F8         ;   R1 :  0x00000000 if STOP was found
  261 000000F8         ;         0xFFFFFFFF if STOP was NOT FOUND 
  262 000000F8         ;**********************************************
  263 000000F8         check_for_stop
                               PROC
  264 000000F8         
  265 000000F8 B40C            PUSH             {R2, R3}
  266 000000FA         
  267 000000FA         ; Load the 4 character string starting at R0
  268 000000FA         ; into a register
  269 000000FA 6802            LDR              R2, [R0]
  270 000000FC         
  271 000000FC         ; Load 'INIT' to R3
  272 000000FC F245 4353 
              F2C5 034F        MOV32            R3, STOP_STR
  273 00000104         
  274 00000104         ; Check to see if the resulting value is 
  275 00000104         ; equal to 'INIT'
  276 00000104 429A            CMP              R2, R3
  277 00000106         
  278 00000106         ; Set the return value
  279 00000106 BF0C 2100       MOVEQ            R1, #0x00000000
  280 0000010A F04F 31FF       MOVNE            R1, #0xFFFFFFFF
  281 0000010E         
  282 0000010E BC0C            POP              {R2, R3}
  283 00000110         
  284 00000110         ; Return
  285 00000110 4770            BX               LR
  286 00000112         
  287 00000112                 ENDP
  288 00000112         
  289 00000112         
  290 00000112         
  291 00000112         ; TODO
  292 00000112         
  293 00000112         ;**********************************************
  294 00000112         ; This function will search through memory a byte at a t
                       ime looking for valid DISPLAY
  295 00000112         ; commands. When a valid DISPLAY command is found, carry
                        out the corresponding
  296 00000112         ; behavior. This function will examine memory until and 
                       STOP command
  297 00000112         ; is found.
  298 00000112         ; Parameters
  299 00000112         ; R0 : The starting address of the memory that contains 
                       the commands to update the
  300 00000112         ; LEDs.
  301 00000112         ;
  302 00000112         ; Return
  303 00000112         ; Nothing
  304 00000112         ;********************************************** 
  305 00000112         hw1_search_memory
                               PROC
  306 00000112         



ARM Macro Assembler    Page 7 


  307 00000112 B507            PUSH             {R0-R2, LR}
  308 00000114         
  309 00000114         ; R2 stores the current address of the command
  310 00000114 4602            MOV              R2, R0
  311 00000116         
  312 00000116         ; check for STOP
  313 00000116 4610    LOOP    MOV              R0, R2
  314 00000118 F7FF FFFE       BL               check_for_stop
  315 0000011C 2900            CMP              R1, #0
  316 0000011E D009            BEQ              STOP
  317 00000120         
  318 00000120         ; check for INIT
  319 00000120 4610            MOV              R0, R2
  320 00000122 F7FF FFFE       BL               check_for_init
  321 00000126 2900            CMP              R1, #0
  322 00000128 BF08 F7FF 
              FFFE             BLEQ             hw1_init
  323 0000012E         
  324 0000012E         ; Increment the current address of the command
  325 0000012E F102 0201       ADD              R2, R2, #1
  326 00000132         
  327 00000132 E7F0            B                LOOP
  328 00000134         
  329 00000134         
  330 00000134         STOP
  331 00000134 E7FE            B                STOP
  332 00000136         
  333 00000136 E8BD 4007       POP              {R0-R2, LR}
  334 0000013A         
  335 0000013A 4770            BX               LR
  336 0000013C                 ENDP
  337 0000013C         
  338 0000013C                 align
  339 0000013C         
  340 0000013C                 END
              00000000 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\obj\hw1.d -o.\obj\hw1.o -I.\RTE\_HW1 -IC:\Keil_v5\ARM\PACK\AR
M\CMSIS\5.4.0\CMSIS\Core\Include -IC:\Keil_v5\ARM\PACK\Keil\TM4C_DFP\1.1.0\Devi
ce\Include\TM4C123 --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" 
--predefine="__UVISION_VERSION SETA 526" --predefine="_RTE_ SETA 1" --predefine
="TM4C123GH6PM SETA 1" --list=.\lst\hw1.lst hw1.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

LED_ARRAY 00000000

Symbol: LED_ARRAY
   Definitions
      At line 21 in file hw1.s
   Uses
      At line 42 in file hw1.s
      At line 139 in file hw1.s
      At line 173 in file hw1.s

SRAM 00000000

Symbol: SRAM
   Definitions
      At line 20 in file hw1.s
   Uses
      None
Comment: SRAM unused
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DONE 0000006A

Symbol: DONE
   Definitions
      At line 94 in file hw1.s
   Uses
      At line 72 in file hw1.s
      At line 82 in file hw1.s
      At line 92 in file hw1.s

FLASH 00000000

Symbol: FLASH
   Definitions
      At line 27 in file hw1.s
   Uses
      None
Comment: FLASH unused
LOOP 00000116

Symbol: LOOP
   Definitions
      At line 313 in file hw1.s
   Uses
      At line 327 in file hw1.s
Comment: LOOP used once
STOP 00000134

Symbol: STOP
   Definitions
      At line 330 in file hw1.s
   Uses
      At line 316 in file hw1.s
      At line 331 in file hw1.s

WAIT_LOOP 000000D2

Symbol: WAIT_LOOP
   Definitions
      At line 205 in file hw1.s
   Uses
      At line 207 in file hw1.s
Comment: WAIT_LOOP used once
ascii_to_dec 00000070

Symbol: ascii_to_dec
   Definitions
      At line 111 in file hw1.s
   Uses
      None
Comment: ascii_to_dec unused
check_for_init 000000DE

Symbol: check_for_init
   Definitions
      At line 224 in file hw1.s
   Uses
      At line 320 in file hw1.s
Comment: check_for_init used once



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

check_for_stop 000000F8

Symbol: check_for_stop
   Definitions
      At line 263 in file hw1.s
   Uses
      At line 314 in file hw1.s
Comment: check_for_stop used once
hw1_ascii_to_hex 00000012

Symbol: hw1_ascii_to_hex
   Definitions
      At line 62 in file hw1.s
   Uses
      None
Comment: hw1_ascii_to_hex unused
hw1_init 0000008A

Symbol: hw1_init
   Definitions
      At line 136 in file hw1.s
   Uses
      At line 322 in file hw1.s
Comment: hw1_init used once
hw1_ledx 000000B2

Symbol: hw1_ledx
   Definitions
      At line 169 in file hw1.s
   Uses
      None
Comment: hw1_ledx unused
hw1_search_memory 00000112

Symbol: hw1_search_memory
   Definitions
      At line 305 in file hw1.s
   Uses
      At line 4 in file hw1.s
Comment: hw1_search_memory used once
hw1_update_leds 00000000

Symbol: hw1_update_leds
   Definitions
      At line 39 in file hw1.s
   Uses
      None
Comment: hw1_update_leds unused
hw1_wait 000000CE

Symbol: hw1_wait
   Definitions
      At line 202 in file hw1.s
   Uses
      None
Comment: hw1_wait unused
14 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

BYTE 00000001

Symbol: BYTE
   Definitions
      At line 10 in file hw1.s
   Uses
      At line 21 in file hw1.s
Comment: BYTE used once
HALF 00000002

Symbol: HALF
   Definitions
      At line 9 in file hw1.s
   Uses
      At line 179 in file hw1.s
      At line 181 in file hw1.s

INIT_STR 54494E49

Symbol: INIT_STR
   Definitions
      At line 13 in file hw1.s
   Uses
      At line 233 in file hw1.s
Comment: INIT_STR used once
STOP_STR 504F5453

Symbol: STOP_STR
   Definitions
      At line 15 in file hw1.s
   Uses
      At line 272 in file hw1.s
Comment: STOP_STR used once
WAIT_STR 54494157

Symbol: WAIT_STR
   Definitions
      At line 14 in file hw1.s
   Uses
      None
Comment: WAIT_STR unused
WORD 00000004

Symbol: WORD
   Definitions
      At line 8 in file hw1.s
   Uses
      At line 142 in file hw1.s
      At line 143 in file hw1.s
      At line 144 in file hw1.s
      At line 145 in file hw1.s
      At line 146 in file hw1.s
      At line 147 in file hw1.s

6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

WS2812B_write 00000000

Symbol: WS2812B_write
   Definitions
      At line 5 in file hw1.s
   Uses
      At line 44 in file hw1.s
Comment: WS2812B_write used once
1 symbol
361 symbols in table
